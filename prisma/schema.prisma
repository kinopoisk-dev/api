generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum MovieType {
  ANIMATED_SERIES // Мульт-сериал
  ANIME // Аниме
  CARTOON // Мультфильм
  MINI_SERIES // Мини-сериал
  MOVIE // Фильм
  TV_SERIES // Сериал
  TV_SHOW // ТВ-Шоу
  VIDEO // Видео
}

enum MovieStatus {
  ANNOUNCED // Анонсирован
  CANCELLED // Отменен
  COMPLETED // Выпущен
  CONTINUES // Продолжается
  FILMING // Сьемки
  IN_PRODUCTION // В производстве
  PILOT // Пилот
  POST_PRODUCTION // Пост-продакшн
  PRE_PRODUCTION // Пре-продакшен
  RUMORS // Слухи
}

enum MovieGenre {
  ACTION // боевик
  ADULT // для взрослых
  ADVENTURE // приключения
  ANIME // аниме
  BIOGRAPHY // биография
  CARTOON // мультфильм
  CEREMONY // церемония
  CHILDREN // детский
  COMEDY // комедия
  CONCERT // концерт
  CRIME // криминал
  DETECTIVE // детектив
  DOCUMENTARY // документальный
  DRAMA // драма
  FAMILY // семейный
  FANTASY // фэнтези
  FICTION // фантастика
  FILM_NOIR // фильм-нуар
  GAME // игра
  HORROR // ужасы
  MELODRAMA // мелодрама
  MILITARY // военный
  MUSIC // музыка
  MUSICAL // мюзикл
  NEWS // новости
  REAL_TV // реальное ТВ
  SHORT_FILM // короткометражка
  SPORTS // спорт
  STORY // история
  TALK_SHOW // ток-шоу
  THRILLER // триллер
  WESTERN // вестерн
}

enum Country {
  AUSTRALIA // Австралия
  AUSTRIA // Австрия
  AZERBAIJAN // Азербайджан
  ALBANIA // Албания
  ALGERIA // Алжир
  US_VIRGIN_ISLANDS // Американские Виргинские острова
  AMERICAN_SAMOA // Американское Самоа
  ANGOLA // Ангола
  ANDORRA // Андорра
  ANTARCTICA // Антарктида
  ANTIGUA_AND_BARBUDA // Антигуа и Барбуда
  ANTILLES // Антильские Острова
  ARGENTINA // Аргентина
  ARMENIA // Армения
  ARUBA // Аруба
  AFGHANISTAN // Афганистан
  BAHAMAS // Багамы
  BANGLADESH // Бангладеш
  BARBADOS // Барбадос
  BAHRAIN // Бахрейн
  BELARUS // Беларусь
  BELIZE // Белиз
  BELGIUM // Бельгия
  BENIN // Бенин
  BERMUDA // Бермуды
  BURMA // Бирма
  BULGARIA // Болгария
  BOLIVIA // Боливия
  BOSNIA // Босния
  BOSNIA_AND_HERZEGOVINA // Босния и Герцеговина
  BOTSWANA // Ботсвана
  BRAZIL // Бразилия
  BRUNEI_DARUSSALAM // Бруней-Даруссалам
  BURKINA_FASO // Буркина-Фасо
  BURUNDI // Бурунди
  BHUTAN // Бутан
  VANUATU // Вануату
  VATICAN // Ватикан
  CITY_UNITED_KINGDOM // Великобритания
  HUNGARY // Венгрия
  VENEZUELA // Венесуэла
  VIRGIN_ISLANDS_UK // Виргинские Острова (Великобритания)
  VIRGIN_ISLANDS_USA // Виргинские Острова (США)
  OUTER_SMALL_ISLANDS_OF_THE_USA // Внешние малые острова США
  VIETNAM // Вьетнам
  VIETNAM_NORTH // Вьетнам Северный
  GABON // Габон
  HAITI // Гаити
  GUYANA // Гайана
  GAMBIA // Гамбия
  GHANA // Гана
  GUADELOUPE // Гваделупа
  GUATEMALA // Гватемала
  GUINEA // Гвинея
  GUINEA_BISSAU // Гвинея-Бисау
  GERMANY // Германия
  GERMANY_GDR // Германия (ГДР)
  GERMANY_FRG // Германия (ФРГ)
  GIBRALTAR // Гибралтар
  HONDURAS // Гондурас
  HONG_KONG // Гонконг
  GRENADA // Гренада
  GREENLAND // Гренландия
  GREECE // Греция
  GEORGIA // Грузия
  GUAM // Гуам
  DENMARK // Дания
  DOMINIKA // Доминика
  DOMINICANA // Доминикана
  EGYPT // Египет
  ZAIRE // Заир
  ZAMBIA // Замбия
  WESTERN_SAHARA // Западная Сахара
  ZIMBABWE // Зимбабве
  ISRAEL // Израиль
  INDIA // Индия
  INDONESIA // Индонезия
  JORDAN // Иордания
  IRAQ // Ирак
  IRAN // Иран
  IRISH // Ирландия
  ICELAND // Исландия
  SPAIN // Испания
  ITALY // Италия
  YEMEN // Йемен
  CAPE_VERDE // Кабо-Верде
  KAZAKHSTAN // Казахстан
  CAYMAN_ISLANDS // Каймановы острова
  CAMBODIA // Камбоджа
  CAMEROON // Камерун
  CANADA // Канада
  QATAR // Катар
  KENYA // Кения
  CYPRUS // Кипр
  KYRGYZSTAN // Киргизия
  KIRIBATI // Кирибати
  CHINA // Китай
  COLOMBIA // Колумбия
  KOMORS // Коморы
  CONGO // Конго
  CONGO_DRC // Конго (ДРК)
  KOREA // Корея
  NORTH_KOREA // Корея Северная
  SOUTH_KOREA // Корея Южная
  KOSOVO // Косово
  COSTA_RICA // Коста-Рика
  IVORY_COAST // Кот-д’Ивуар (Берег Слоновой кости)
  CUBA // Куба
  KUWAIT // Кувейт
  LAOS // Лаос
  LATVIA // Латвия
  LESOTHO // Лесото
  LIBERIA // Либерия
  LEBANON // Ливан
  LIBYA // Ливия
  LITHUANIA // Литва
  LIECHTENSTEIN // Лихтенштейн
  LUXEMBOURG // Люксембург
  MAURITIUS // Маврикий
  MAURITANIA // Мавритания
  MADAGASCAR // Мадагаскар
  MACAU // Макао
  MACEDONIA // Македония
  MALAWI // Малави
  MALAYSIA // Малайзия
  MALI // Мали
  MALDIVES // Мальдивы
  MALTA // Мальта
  MOROCCO // Марокко
  MARTINIQUE // Мартиника
  MARSHALL_ISLANDS // Маршалловы острова
  MEXICO // Мексика
  MOZAMBIQUE // Мозамбик
  MOLDOVA // Молдова
  MONACO // Монако
  MONGOLIA // Монголия
  MONTSERRAT // Монтсеррат
  MYANMAR // Мьянма
  NAMIBIA // Намибия
  NEPAL // Непал
  NIGER // Нигер
  NIGERIA // Нигерия
  NETHERLANDS // Нидерланды
  NICARAGUA // Никарагуа
  NEW_ZEALAND // Новая Зеландия
  NEW_CALEDONIA // Новая Каледония
  NORWAY // Норвегия
  UAE // ОАЭ
  OCCUPIED_PALESTINIAN_TERRITORY // Оккупированная Палестинская территория
  OMAN // Оман
  ISLE // Остров Мэн
  OF_MAN_COOK_ISLANDS // Острова Кука
  PAKISTAN // Пакистан
  PALAU // Палау
  PALESTINE // Палестина
  PANAMA_HAT // Панама
  PAPUA_NEW_GUINEA // Папуа - Новая Гвинея
  PARAGUAY // Парагвай
  PERU // Перу
  POLAND // Польша
  PORTUGAL // Португалия
  PUERTO_RICO // Пуэрто Рико
  REUNION // Реюньон
  THE_RUSSIAN_EMPIRE // Российская империя
  RUSSIA // Россия
  RWANDA // Руанда
  ROMANIA // Румыния
  USSR // СССР
  USA // США
  EL_SALVADOR // Сальвадор
  SAMOA // Самоа
  SAN_MARINO // Сан-Марино
  SAUDI_ARABIA // Саудовская Аравия
  SWAZILAND // Свазиленд
  NORTHERN_MACEDONIA // Северная Македония
  SEYCHELLES // Сейшельские острова
  SENEGAL // Сенегал
  SAINT_VINCENT_AND_THE_GRENADINES // Сент-Винсент и Гренадины
  SAINT_LUCIA // Сент-Люсия
  SERBIA // Сербия
  SERBIA_AND_MONTENEGRO // Сербия и Черногория
  SIAM // Сиам
  SINGAPORE // Сингапур
  SYRIA // Сирия
  SLOVAKIA // Словакия
  SLOVENIA // Словения
  SOMALIA // Сомали
  SUDAN // Судан
  SURINAME // Суринам
  SIERRA_LEONE // Сьерра-Леоне
  TAJIKISTAN // Таджикистан
  THAILAND // Таиланд
  TAIWAN // Тайвань
  TANZANIA // Танзания
  TIMOR_LESTE // Тимор-Лесте
  TOGO // Того
  TONGA // Тонга
  TRINIDAD_AND_TOBAGO // Тринидад и Тобаго
  TUVALU // Тувалу
  TUNISIA // Тунис
  TURKMENISTAN // Туркменистан
  TURKEY // Турция
  UGANDA // Уганда
  UZBEKISTAN // Узбекистан
  UKRAINE // Украина
  URUGUAY // Уругвай
  FAROE_ISLANDS // Фарерские острова
  FEDERATED_STATES_OF_MICRONESIA // Федеративные Штаты Микронезии
  FIJI // Фиджи
  PHILIPPINES // Филиппины
  FINLAND // Финляндия
  FRANCE // Франция
  FRENCH_GUIANA // Французская Гвиана
  FRENCH_POLYNESIA // Французская Полинезия
  CROATIA // Хорватия
  TSAR // ЦАР
  CHAD // Чад
  MONTENEGRO // Черногория
  CZECH // Чехия
  CZECHOSLOVAKIA // Чехословакия
  CHILE // Чили
  SWITZERLAND // Швейцария
  SWEDEN // Швеция
  SRI_LANKA // Шри-Ланка
  ECUADOR // Эквадор
  EQUATORIAL_GUINEA // Экваториальная Гвинея
  ERITREA // Эритрея
  ESTONIA // Эстония
  ETHIOPIA // Эфиопия
  SOUTH_AFRICA // ЮАР
  YUGOSLAVIA // Югославия
  YUGOSLAVIA_FR // Югославия (ФР)
  JAMAICA // Ямайка
  JAPAN // Япония
}

enum ImageType {
  BACKDROP
  POSTER
  FRAME
  LOGO
}

type CollectionsImage {
  url String?
}

type MovieBackdrop {
  previewUrl String?
  url        String?
}

type MovieLogo {
  url String?
}

type MovieBudget {
  currency String?
  value    String
}

type MovieCountries {
  id   String @map("_id") @db.ObjectId
  name String
}

type MovieDistributors {
  distributor        String?
  distributorRelease String?
}

type MovieExternalId {
  imdb String?
  tmdb Int?
  kpHD String?
}

type MovieFacts {
  spoiler Boolean?
  type    String?
  value   String
}

type MovieFees {
  usa    MovieFeesUsa?
  world  MovieFeesWorld?
  russia MovieFeesRussia?
}

type MovieFeesRussia {
  /// Field referred in an index, but found no data to define the type.
  value Int?
}

type MovieFeesUsa {
  currency String
  value    Int
}

type MovieFeesWorld {
  currency String
  value    Int
}

type MovieNetworks {
  name       String
  previewUrl String
  url        String
}

type MoviePersons {
  description  String?
  enName       String?
  enProfession String
  name         String?
  photo        String
  profession   String?
}

type MoviePoster {
  previewUrl String
  url        String
}

type MoviePremiere {
  country String?
  bluray  DateTime? @db.Date
  cinema  DateTime? @db.Date
  digital DateTime? @db.Date
  dvd     DateTime? @db.Date
  russia  DateTime? @db.Date
  world   DateTime? @db.Date
}

type MovieProductionCompanies {
  name       String
  previewUrl String?
  url        String?
}

type MovieRating {
  kp                 Float
  imdb               Float
  await              Float?
  filmCritics        Float?
  russianFilmCritics Float?
  tmdb               Float?
}

type MovieSeasonsInfo {
  episodesCount Int
  number        Int
}

type MovieSequelsAndPrequels {
  alternativeName String?
  enName          String?
  name            String?
  poster          MovieSequelsAndPrequelsPoster?
  type            String?
}

type MovieSequelsAndPrequelsPoster {
  previewUrl String
  url        String
}

type MovieSimilarMovies {
  alternativeName String?
  enName          String?
  name            String
  poster          MovieSimilarMoviesPoster
}

type MovieSimilarMoviesPoster {
  previewUrl String
  url        String
}

type MovieSpokenLanguages {
  name   String
  nameEn String
}

type MovieTechnology {
  has3D   Boolean
  hasImax Boolean
}

type MovieVideos {
  teasers  MovieVideosTeasers[]
  trailers MovieVideosTrailers[]
}

type MovieVideosTeasers {
  name String
  site String
  size Int
  type String
  url  String
}

type MovieVideosTrailers {
  name String
  site String
  size Int?
  type String?
  url  String
}

type MovieVotes {
  await              Int?
  filmCritics        Int?
  imdb               Int
  kp                 Int
  russianFilmCritics Int?
  tmdb               Int?
}

type OldmoviesData {
  /// Field referred in an index, but found no data to define the type.
  id Json?
}

type PersonBirthPlace {
  value String
}

type PersonDeathPlace {
  value String
}

type PersonFacts {
  value String
}

type PersonMovies {
  alternativeName String?
  description     String?
  general         Boolean
  name            String?
  rating          Float?
}

type PersonProfession {
  value String
}

type PersonSpouses {
  children       Int
  divorced       Boolean
  divorcedReason String
  name           String
  relation       String
  sex            String?
}

type PersonsFacts {
  value String
}

type PersonsMovies {
  description String
  general     Boolean
  name        String?
  rating      Float?
}

type PersonsProfession {
  value String
}

type PersonsSpouses {
  children       Int
  divorced       Boolean
  divorcedReason String
  name           String
  relation       String
  sex            String?
}

type SeasonsEpisodes {
  date        DateTime?
  description String?
  enName      String?
  name        String?
  number      Int
}

model collection {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  collectionId String?          @unique(map: "collectionId_1")
  image        CollectionsImage
  movies       String[]         @db.ObjectId
  sortRange    Int
  title        String?
  updateDates  DateTime[]       @db.Date

  @@index([title], map: "title_1")
}

model Image {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  // String properties
  url        String    @unique()
  language   String?
  previewUrl String
  // Int properties
  kpMovieId  Int
  height     Int?
  width      Int?
  // Enum properties
  type       ImageType
  // Date proprties
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  // Relations
  movie      Movie     @relation(fields: [movieId], references: [id])
  movieId    String    @db.ObjectId

  @@index([movieId])
}

model Movie {
  // Id properties
  id                  String                     @id @default(auto()) @map("_id") @db.ObjectId
  kpId                int                        @unique
  externalId          MovieExternalId
  // String properties
  name                String?
  names               String[]
  enName              String?
  alternativeName     String?
  description         String?
  ratingMpaa          String?
  shortDescription    String?
  slogan              String?
  //Int properties
  year                Int?
  movieLength         Int?
  ageRating           Int?
  // Enum properties
  type                MovieType?
  status              MovieStatus?
  genres              MovieGenre[]
  countries           Country[]
  // Type properties
  poster              MoviePoster
  backdrop            MovieBackdrop?
  budget              MovieBudget?
  logo                MovieLogo?
  distributors        MovieDistributors?
  votes               MovieVotes
  facts               MovieFacts[]
  fees                MovieFees?
  networks            MovieNetworks[]
  premiere            MoviePremiere?
  technology          MovieTechnology?
  spokenLanguages     MovieSpokenLanguages[]
  productionCompanies MovieProductionCompanies[]
  persons             MoviePersons[]
  rating              MovieRating
  seasonsInfo         MovieSeasonsInfo[]
  sequelsAndPrequels  MovieSequelsAndPrequels[]
  similarMovies       MovieSimilarMovies[]
  videos              MovieVideos?
  // Date proprties
  createdAt           DateTime                   @default(now())
  updatedAt           DateTime                   @updatedAt
  // Relations
  images              Image[]
}

model Person {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  kpId        int                @unique
  age         Int?
  birthPlace  PersonBirthPlace[]
  birthday    DateTime?          @db.Date
  countAwards Int?
  createdAt   DateTime?          @db.Date
  death       DateTime?          @db.Date
  deathPlace  PersonDeathPlace[]
  enName      String?
  facts       PersonFacts[]
  growth      Int?
  isParse     Boolean?
  movies      PersonMovies[]
  name        String?
  photo       String
  profession  PersonProfession[]
  sex         String?
  spouses     PersonSpouses[]
  // Date proprties
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model review {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  author         String
  createdAt      DateTime @db.Date
  date           DateTime @db.Date
  id_            Int      @map("id")
  movieId        Int
  review         String
  reviewDislikes Int
  reviewLikes    Int
  title          String?
  updatedAt      DateTime @db.Date
  /// Multiple data types found: Float: 2%, Int: 98% out of 1000 sampled entries
  userRating     Json

  @@index([movieId], map: "movieId_1")
}

model season {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime?         @db.Date
  episodes      SeasonsEpisodes[]
  episodesCount Int
  movieId       Int
  number        Int
  updatedAt     DateTime?         @db.Date

  @@index([movieId], map: "movieId_1")
}
